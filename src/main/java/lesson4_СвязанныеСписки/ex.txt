Стек реализуемый в памяти Java, и стек, который мы делали на прошлом занятии это две разные вещи. Одна структура данных, другая область памяти.

Тоже самое касается и heap(куча). Это динамическая область памяти, а не структура данных.

Список в Java - в списках будет один главный класс LinkedList. Он будет точной входа во весь список. В этом классе единственно что будет храниться это переманная first. Поле first будет хранить ссылку на первый экземпляр списка. Этот экземпляр будет представлен специальным внутренним классом (назовем этот внутренний класс Node). У Node внутри будет поле next и поле value (а еще может быть поле previous - то есть предидущий). Допусти Node хранит значение 3 (этот элемент будет знать какой элемент будет находиться дальше) и из них у нас будет цепочка.
То бишь список объектов, которые выстраиваются цепочкой.

Особенности списка:
 Лучше то что теперь мы никаким образом не зависим от размеров данных, которые к нам приходят. То есть нам не нужно знать сколько элементов к нам придет. Если необходимо добавить - то просто добавляем. Еслу нужно удалить - сдвиги не нужно делать, просто удаляем ссылку и переназначаем в обход ссылки удаленного элемента.
Если добавляем (или удаляем) в начало или в конец то O(1).
Если элемент стоит в самой середине, то операция вставки, поиска, удаления будет равна O(n).
Хаотичного доступа к элементам в списке нет.(По это же причине здесь невозможно применять какие то алгиритмы поиска и сортировки.
То есть если хотим найти элемент номер 7, то нужно пройтись по всей цепочке элементов, которые ведут до элемента 7 обязательо (first node1 node2 node3 ... node7).
Списки лучше всего себя проявляют, когда нужно добавить элемент в начало или в конец (очередь и стек).

